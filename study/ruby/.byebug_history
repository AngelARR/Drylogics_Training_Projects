n
swap_count
n
swap_count
n
swap_count
n
swap_count
n
swap_count
c
n
swap_count
n
arr[head]
arr[head + 1]
swap_count
n
arr[head + 1]
arr[head]
head
swap_count
n
arr
arr[head + 1]
arr[head]
head
swap_count
c
exit
Math.log(high + low, 2)
tempArr
n
tempArr
low
high
n
tempArr
arr
n
arr
low
mid
n
s
high
mid + 1
tempArr
exit
tempArr[low...high]
arr[low...high]
arr[low...high
arr[first_index]
arr[second_index]
tempArr[i]
n
tempArr[i]
n
tempArr[i]
n
i
n
tempArr[i]
n
tempArr[i]
n
arr[second_index]
arr[first_index]
exit
n
arr[middle]
middle
exit
n
s
exit
divide(1, 6, 2)
end
  end
    quotient.to_s + "." + fraction_part.to_s
    fraction_part = divide(a, b, decimal_places, true)
    end
      remainder = a % b
      quotient = (a / b)
    else
      remainder = a
      quotient = 0
    if a < b
  else
    quotient.to_s + divide(remainder, b, decimal_places - 1, true)   
    remainder = a % b
    quotient = (a / b)
    a *= 10
  if(has_decimal_point)
  byebug
  return 0 if decimal_places == 0 or a == 0
def divide(a, b, decimal_places, has_decimal_point = false)
require 'byebug'
quotient * 10
var local
n
6
a / b
b
a
n
var local
c
n
var local
a
